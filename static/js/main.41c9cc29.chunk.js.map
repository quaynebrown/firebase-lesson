{"version":3,"sources":["firebase.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","handleAdd","e","preventDefault","database","ref","push","state","userInput","handleInputChange","setState","target","value","removeBook","bookId","child","remove","books","on","data","firebaseDataObj","val","booksArray","propertyKey","formattedObj","id","name","className","this","map","book","onClick","htmlFor","type","onChange","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAgBAA,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,ECqFeS,G,wDAzFb,aAAc,IAAD,8BACX,gBAqCFC,UAAY,SAACC,GACXA,EAAEC,iBACYZ,EAASa,WAAWC,MAE5BC,KAAK,EAAKC,MAAMC,YA1CX,EA6CbC,kBAAoB,SAACP,GACnB,EAAKQ,SAAS,CACZF,UAAYN,EAAES,OAAOC,SA/CZ,EAmDbC,WAAa,SAACC,GAEAvB,EAASa,WAAWC,MAC1BU,MAAMD,GAAQE,UApDpB,EAAKT,MAAQ,CACXU,MAAM,IAHG,E,gEAOO,IAAD,OAEH1B,EAASa,WAAWC,MAG5Ba,GAAG,SAAS,SAACC,GACjB,IAAMC,EAAkBD,EAAKE,MAGvBC,EAAa,GAGnB,IAAK,IAAIC,KAAeH,EAAgB,CACtC,IAEMI,EAAe,CACnBC,GAAIF,EACJG,KAJgBN,EAAgBG,IAOlCD,EAAWhB,KAAKkB,GAIhB,EAAKd,SAAS,CACZO,MAAOK,U,+BAyBN,IAAD,OACN,OACE,sBAAKK,UAAU,cAAf,UACE,iDACA,6BAEIC,KAAKrB,MAAMU,MAAMY,KAAI,SAACC,GACpB,OACE,+BACE,4BAAIA,EAAKJ,OACT,wBAAQK,QAAS,kBAAM,EAAKlB,WAAWiB,EAAKL,KAA5C,sBAFOK,EAAKL,SAStB,iCACE,uBAAOO,QAAQ,UAAf,0CACA,uBACEC,KAAK,OACLR,GAAG,UACHS,SAAUN,KAAKnB,oBAEjB,wBAAQsB,QAASH,KAAK3B,UAAtB,gC,GAlFQkC,cCDHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.41c9cc29.chunk.js","sourcesContent":["// import firebase SDK from npm install firebase node package\r\nimport firebase from \"firebase/app\";\r\n\r\n// Realtime database library\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDh1eb9fmQig_UKU7s8syDARx1B8WlQDQM\",\r\n    authDomain: \"bookshelf-cb7a1.firebaseapp.com\",\r\n    databaseURL: \"https://bookshelf-cb7a1.firebaseio.com\",\r\n    projectId: \"bookshelf-cb7a1\",\r\n    storageBucket: \"bookshelf-cb7a1.appspot.com\",\r\n    messagingSenderId: \"319525045519\",\r\n    appId: \"1:319525045519:web:95f3db75feb9e15fda6a7a\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import { Component } from 'react';\nimport firebase from './firebase.js';\nimport './App.css';\n\n// Configure firebase on React \n// make a reference to the database\n// Add each property from the database object to state\n// Map through the properties and display them on the page\n// implement add and remove button\n// on remove button click, remove the property that was clicked on from the database\n// Create a form that will allow the user to add more properties to the database\n// onSubmit of the form, submit user input value to firebase\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      books:[]\n    }\n  }\n\n  componentDidMount(){\n    // make a reference to the database\n    const dbRef = firebase.database().ref()\n\n    // get data from the database\n    dbRef.on('value', (data) => {\n      const firebaseDataObj = data.val();\n\n      // make a new empty array\n      const booksArray = [];\n      // use the for in loop to loop through the object\n      // extract the key and value of the object\n      for (let propertyKey in firebaseDataObj){\n        let propertyVal = firebaseDataObj[propertyKey]\n        // format it to the key and value of the object\n        const formattedObj = {\n          id: propertyKey,\n          name: propertyVal\n        }\n        // push this new item into the array\n        booksArray.push(formattedObj)\n        // console.log(booksArray)\n\n        // setState with the new array\n        this.setState({\n          books: booksArray\n        })\n      }\n    });\n  }\n\n  handleAdd = (e) =>{\n    e.preventDefault();\n    const dbRef = firebase.database().ref();\n\n    dbRef.push(this.state.userInput);\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      userInput : e.target.value\n    })\n  }\n\n  removeBook = (bookId) => {\n\n    let dbRef = firebase.database().ref();\n    dbRef.child(bookId).remove();\n  } \n  \n  render(){\n    return (\n      <div className='App wrapper'>\n        <h1>Hello Bookshelf</h1>\n        <ul>\n          {// js code in here\n            this.state.books.map((book) => {\n              return(\n                <li key={book.id}>\n                  <p>{book.name}</p>\n                  <button onClick={() => this.removeBook(book.id)}>Remove</button>\n                </li>\n              )\n            })\n          }\n        </ul>\n\n        <form>\n          <label htmlFor=\"newBook\">Please give me a new title: </label>\n          <input \n            type=\"text\" \n            id=\"newBook\" \n            onChange={this.handleInputChange}\n          />\n          <button onClick={this.handleAdd}>Add Book</button>\n        </form>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}